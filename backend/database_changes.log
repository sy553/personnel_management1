# 数据库修改日志

## 2024-01-08 数据库表关系优化

### 1. 添加部门和职位的关联关系

#### 修改内容
1. 创建 `add_department_id.py` 脚本
   - 添加 department_id 字段到 positions 表
   - 设置外键约束，关联 positions.department_id 到 departments.id
   - 使用 information_schema 检查约束和字段是否存在
   - 分步执行 SQL 语句，确保操作的安全性

2. 创建 `update_position_departments.py` 脚本
   - 更新职位与部门的关联关系：
     * 软件工程师(ID:1) -> 技术部(ID:1)
     * 高级工程师(ID:2) -> 技术部(ID:1)
     * HR专员(ID:3) -> 人事部(ID:2)
     * 财务专员(ID:4) -> 财务部(ID:3)

3. 更新 `check_dept_pos.py` 脚本
   - 显示部门和职位的完整信息
   - 通过 LEFT JOIN 显示职位所属部门
   - 显示表结构确认字段添加成功

#### 验证结果
1. positions 表结构更新：
   - 新增 department_id 字段（int(11)）
   - 设置为可空（YES）
   - 添加外键约束（MUL）

2. 数据关联验证：
   - 所有职位都已正确关联到对应部门
   - 外键约束正常工作
   - 可以通过 JOIN 查询获取完整的部门-职位关系

### 注意事项
1. 在添加或修改字段时，使用了检查机制避免重复操作
2. 使用事务确保数据完整性
3. 所有脚本都包含错误处理机制

### 相关文件
- add_department_id.py：添加部门ID字段
- update_position_departments.py：更新职位部门关联
- check_dept_pos.py：验证数据正确性

### 后续建议
1. 在添加新职位时，确保设置正确的 department_id
2. 考虑在删除部门时的级联操作策略
3. 可以基于此关系开发部门职位管理功能

## 2024-01-09 数据库模型关系优化

### 1. 优化数据库模型关系定义

#### 修改内容
[2024-01-09] 优化数据库模型关系定义
1. Employee 模型修改：
   - 使用 back_populates 替换简单的 relationship 定义
   - position = db.relationship('Position', back_populates='employees')
   - department = db.relationship('Department', foreign_keys=[department_id], back_populates='employees')
   - 保留 user = db.relationship('User', backref='employee')

2. Position 模型修改：
   - 使用 back_populates 定义与 Employee 的双向关系
   - employees = db.relationship('Employee', back_populates='position', lazy='dynamic')

3. Department 模型修改：
   - 使用 back_populates 定义与 Employee 的双向关系
   - employees = db.relationship('Employee', foreign_keys='Employee.department_id', back_populates='department', lazy='dynamic')
   - 保留其他关系定义不变

修改目的：
- 解决模型关系中的循环引用问题
- 消除关系冲突警告
- 优化模型之间的双向关系定义
- 确保正确的外键约束和懒加载策略

测试结果：
- 数据库初始化成功
- 所有表创建正常
- 测试数据插入成功
- 没有警告信息
